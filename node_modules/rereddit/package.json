{
  "name": "rereddit",
  "version": "0.1.0",
  "description": "A NodeJS wrapper for interfacing with the reddit.com API.",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/chuckpreslar/rereddit.git"
  },
  "keywords": [
    "rereddit",
    "reddit",
    "api",
    "wrapper"
  ],
  "dependencies": {
    "superagent": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "author": {
    "name": "Chuck Preslar",
    "email": "chuckpreslar@gmail.com",
    "url": "http://www.chuckpreslar.com/"
  },
  "contributors": [
    {
      "name": "Zach Fogg",
      "email": "zach.fogg@gmail.com",
      "url": "http://zachfogg.com"
    }
  ],
  "license": "MIT",
  "readme": "![broadcaster logo](http://i.imgur.com/kk7q0Ni.png)\n\n## About\n\nRereddit is a NodeJS wrapper for interfacing with reddit.com's API.  It is built around [superagent](https://github.com/visionmedia/superagent) with a few extentions to its Request object for convenience.  This extension allows for requests to be made like so:\n\n```js\nrereddit.read('funny').limit(25).after('t3_a515a')\n    .end(function(err, posts) {\n        // Do something with posts.\n    });\n```\n\nRereddit also allows for accessing protected content, returning a `user` object from a successful call to `login` that can be stored within a session and passed back to the module when needed.\n\n```js\nrereddit.login('username', 'password').end(function(err, user) {\n    rereddit.me().as(user)\n        .end(function(err, details) {\n            // Now we have the user's details. \n        });\n});\n```\n\n## Usage\n\nInstall via NPM.\n\n    $ npm install rereddit\n\nThen simply require within your application.\n\n```js\nvar rereddit = require('rereddit');\n```\n## API\n\n#### read([item])\nThe `read` function takes an optional string as an argument, matching either a reddit thing id36, or subreddit name.  If no argument is present, rereddit assumes you wish to grab the front page posts of reddit.com.\n#### login(username, password)\nLogin generates the initial post request and attaches the users credentials.  Calling `end` on a `login` request will return a `user` object containing the cookie to be set, as well as a data object holding the generated modhash and cookie details like so:\n\n```js\n{\n    cookie: String,\n    data: {\n        modhash: String,\n        cookie: String\n    }\n}\n```\n\n#### me()\nA call to `me` generates an initialized request to grab the user's details. A call to `me` must be followed by a call to `as` (documented below) to pass along the required credentials with the request.\n\n#### reddits()\nInitializes a request to retrieve a list of subreddits from reddit.com.\n\n#### comments(thread)\nInitializes a request to fetch the comments for a `thread` (thread may be the fullname of a reddit thing, or just a things id only).  \n\n#### comment(parent, text), reply(parent, text)\nInitializes a request to post a comment to the specified `parent` thread with the given `text`.  An alias is provided as `reply` to allow for flavor.  *The `parent` id is expected to be in proper id36 format.*\n\n#### vote(id, dir)\nInitializes a request to cast a vote on the specified `id` in the given direction `dir`, which is a string (equal to up or down), or integer (1 or -1).  *The  `id` is expected to be in proper id36 format.*\n\n#### inbox()\nReturns the messages stored in a user's inbox.  The user is provided with a chained call to `me`.\n\n#### unread()\nReturns only the unread messages from a user's inbox.  The user is provided with a chained call to `me`.\n\n#### sent()\nReturns messages that the user has previously sent.  The user is provided with a chained call to `me`.\n\n#### moreChildren(id, children)\nInitializes a request to retrieve hidden comments.  `children` may be supplied as an array of strings or comma-delimited strings.  *The  `chidlren` are expected to be in proper id36 format.*\n\n### Rereddit exposes [superagent's](https://github.com/visionmedia/superagent) Request object with a few additional convenience methods attached to each instance.\n\n#### as(user)\nThe additional `as` method attached to the `Request` prototype simply fits the object with credentials to pass along to the reddit.com API.\n#### limit(num)\nLimit, as may be expected, is used for limiting the amount of results returned via a request geneerated by a call to `read`.\n#### after(id)\nAs with `limit`, `after` simply tells the request that all results returned from a `read` request should follow after the specified id.  *The  `id` is expected to be in proper id36 format.*\n\n### Release v0.1.0\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/chuckpreslar/rereddit/issues"
  },
  "_id": "rereddit@0.1.0",
  "dist": {
    "shasum": "b84a2fcb5c16da4642117e249ee890f4b039522d"
  },
  "_from": "rereddit@",
  "_resolved": "https://registry.npmjs.org/rereddit/-/rereddit-0.1.0.tgz"
}
